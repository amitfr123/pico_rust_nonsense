[package]
authors = ["amit <amitfr2000@gmail.com>"]
name = "artic_demo"
edition = "2018"
version = "0.1.0"

[workspace]
members = ["testsuite"]

[dependencies]
defmt = "0.3.0"
defmt-rtt = "0.4.0"
panic-probe = { version = "0.3.0", features = ["print-defmt"] }
cortex-m-rtic = "1.1.3"
cortex-m = { version = "0.7", features = ["critical-section"] }
critical-section = "1.1.1"
rp2040-boot2 = { version = "0.2.0", optional = true }
rp2040-hal = { version = "0.7.0", features = [ "defmt" ] }
embedded-hal ="0.2.5"
panic-halt= "0.2.0"
cortex-m-rt = {version = "0.7", optional = true }
usb-device= "0.2.9"
usbd-serial = "0.1.1"
heapless = "0.7.16"
base_protocol = { path = "../common_protocol" }

[features]
default = ["rt", "boot2", "critical-section-impl", "required-features"]
required-features = ["rp2040-hal/rtic-monotonic"]

# Minimal startup / runtime for Cortex-M microcontrollers
rt = ["cortex-m-rt", "rp2040-hal/rt"]

# 2nd stage bootloaders for rp2040
boot2 = ["rp2040-boot2"]

# critical section that is safe for multicore use
critical-section-impl = ["rp2040-hal/critical-section-impl"]

# cargo build/run
[profile.dev]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = "s" # <-
overflow-checks = true # <-

# cargo test
[profile.test]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = "s" # <-
overflow-checks = true # <-

# cargo build/run --release
[profile.release]
codegen-units = 1
debug = 2
debug-assertions = false # <-
incremental = false
lto = 'fat'
opt-level = "s" # <-
overflow-checks = false # <-

# cargo test --release
[profile.bench]
codegen-units = 1
debug = 2
debug-assertions = false # <-
incremental = false
lto = 'fat'
opt-level = "s" # <-
overflow-checks = false # <-

# uncomment this to switch from the crates.io version of defmt to its git version
# check app-template's README for instructions
# [patch.crates-io]
# defmt = { git = "https://github.com/knurling-rs/defmt", rev = "use defmt version reported by `probe-run --version`" }
# defmt-rtt = { git = "https://github.com/knurling-rs/defmt", rev = "use defmt version reported by `probe-run --version`" }
# defmt-test = { git = "https://github.com/knurling-rs/defmt", rev = "use defmt version reported by `probe-run --version`" }
# panic-probe = { git = "https://github.com/knurling-rs/defmt", rev = "use defmt version reported by `probe-run --version`" }
